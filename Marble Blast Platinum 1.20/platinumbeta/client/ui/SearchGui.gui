//--- OBJECT WRITE BEGIN ---
new GuiControl(SearchGui) {
   profile = "GuiDefaultProfile";
   horizSizing = "width";
   vertSizing = "height";
   position = "0 0";
   extent = "640 480";
   minExtent = "8 8";
   visible = "1";
   helpTag = "0";

   new GuiBitmapCtrl() {
      profile = "GuiDefaultProfile";
      horizSizing = "center";
      vertSizing = "center";
      position = "63 12";
      extent = "514 455";
      minExtent = "48 92";
      visible = "1";
      helpTag = "0";
      bitmap = "./marbleSelect/marbleSelect.png";
      wrap = "0";
         resizeHeight = "1";
         canMaximize = "0";
         canMove = "1";
         minSize = "50 50";
         canClose = "0";
         maxLength = "255";
         resizeWidth = "1";
         canMinimize = "0";

      new GuiBitmapButtonCtrl() {
         profile = "GuiButtonProfile";
         horizSizing = "right";
         vertSizing = "top";
         position = "132 387";
         extent = "112 59";
         minExtent = "8 8";
         visible = "1";
         command = "Canvas.popDialog(SearchGui);";
         accelerator = "return";
         helpTag = "0";
         text = "OK";
         groupNum = "-1";
         buttonType = "PushButton";
         repeatPeriod = "1000";
         repeatDecay = "1";
         bitmap = "./loading/cancel";
            simpleStyle = "0";
      };
      new GuiScrollCtrl() {
         profile = "GuiScrollProfile";
         horizSizing = "right";
         vertSizing = "bottom";
         position = "24 43";
         extent = "462 338";
         minExtent = "8 8";
         visible = "1";
         helpTag = "0";
         willFirstRespond = "1";
         hScrollBar = "dynamic";
         vScrollBar = "alwaysOn";
         constantThumbHeight = "0";
         childMargin = "0 0";

         new GuiTextListCtrl(SearchMissionList) {
            profile = "GuiTextListProfile";
            horizSizing = "right";
            vertSizing = "bottom";
            position = "2 2";
            extent = "440 96";
            minExtent = "8 8";
            visible = "1";
            helpTag = "0";
            enumerate = "0";
            resizeCell = "1";
            columns = "0";
            fitParentWidth = "1";
            clipColumnText = "0";
         };
      };
      new GuiBitmapButtonCtrl(SeG_play) {
         profile = "GuiButtonProfile";
         horizSizing = "right";
         vertSizing = "bottom";
         position = "277 386";
         extent = "100 59";
         minExtent = "8 8";
         visible = "1";
         command = "SearchGui::StartMission();";
         helpTag = "0";
         text = "play";
         groupNum = "-1";
         buttonType = "PushButton";
         repeatPeriod = "1000";
         repeatDecay = "1";
         bitmap = "./search/play";
      };
      new GuiBitmapCtrl() {
         profile = "GuiDefaultProfile";
         horizSizing = "width";
         vertSizing = "height";
         position = "61 9";
         extent = "426 33";
         minExtent = "8 8";
         visible = "1";
         helpTag = "0";
         bitmap = "./window";
         wrap = "0";
      };
      new GuiBitmapButtonCtrl(SearchOptionsPush) {
         profile = "GuiDefaultProfile";
         horizSizing = "right";
         vertSizing = "bottom";
         position = "21 7";
         extent = "37 36";
         minExtent = "8 8";
         visible = "1";
         command = "SearchGui.pushOptions();";
         helpTag = "0";
         text = "button";
         groupNum = "-1";
         buttonType = "PushButton";
         repeatPeriod = "1000";
         repeatDecay = "1";
         bitmap = "./search/search";
      };
      new GuiMLTextCtrl(SearchTitle) {
         profile = "GuiMLTextProfile";
         horizSizing = "right";
         vertSizing = "bottom";
         position = "71 12";
         extent = "64 25";
         minExtent = "8 8";
         visible = "1";
         helpTag = "0";
         lineSpacing = "2";
         allowColorChars = "0";
         maxChars = "-1";
      };
      new GuiTextEditCtrl(SearchEdit) {
         profile = "GuiSearchTextEditProfile";
         horizSizing = "right";
         vertSizing = "bottom";
         position = "111 15";
         extent = "365 23";
         minExtent = "8 8";
         visible = "1";
         command = "SearchGui.search();";
         altCommand = "SearchGui.entryStart();";
         helpTag = "0";
         maxLength = "255";
         maxPixelWidth = "0";
         historySize = "0";
         password = "0";
         tabComplete = "0";
         sinkAllKeyEvents = "1";
      };
   };
   new GuiBitmapCtrl(SearchOptionsPop) {
      profile = "GuiDefaultProfile";
      horizSizing = "width";
      vertSizing = "height";
      position = "0 0";
      extent = "640 480";
      minExtent = "8 8";
      visible = "0";
      helpTag = "0";
      bitmap = "./hudfill";
      wrap = "0";

      new GuiBitmapCtrl() {
         profile = "GuiDefaultProfile";
         horizSizing = "center";
         vertSizing = "center";
         position = "158 146";
         extent = "324 188";
         minExtent = "8 8";
         visible = "1";
         helpTag = "0";
         bitmap = "./play/text_window";
         wrap = "0";

         new GuiBitmapCtrl() {
            profile = "GuiDefaultProfile";
            horizSizing = "center";
            vertSizing = "bottom";
            position = "76 10";
            extent = "172 36";
            minExtent = "8 8";
            visible = "1";
            helpTag = "0";
            bitmap = "./search/searchoptions";
            wrap = "0";
         };
         new GuiBitmapButtonCtrl() {
            profile = "GuiDefaultProfile";
            horizSizing = "left";
            vertSizing = "top";
            position = "164 132";
            extent = "100 40";
            minExtent = "8 8";
            visible = "1";
            command = "SearchGui.popOptions();";
            helpTag = "0";
            text = "button";
            groupNum = "-1";
            buttonType = "PushButton";
            repeatPeriod = "1000";
            repeatDecay = "1";
            bitmap = "./marbleSelect/okay";
         };
         new GuiBitmapCtrl() {
            profile = "GuiDefaultProfile";
            horizSizing = "center";
            vertSizing = "bottom";
            position = "113 46";
            extent = "98 30";
            minExtent = "8 8";
            visible = "1";
            helpTag = "0";
            bitmap = "./search/searchby";
            wrap = "0";
         };
         new GuiBitmapButtonCtrl(SearchByTitle) {
            profile = "GuiDefaultProfile";
            horizSizing = "right";
            vertSizing = "bottom";
            position = "51 76";
            extent = "71 54";
            minExtent = "8 8";
            visible = "1";
            command = "SearchGui.setSearchType(0);";
            helpTag = "0";
            text = "button";
            groupNum = "-1";
            buttonType = "RadioButton";
            repeatPeriod = "1000";
            repeatDecay = "1";
            bitmap = "./search/title";
         };
         new GuiBitmapButtonCtrl(SearchByArtist) {
            profile = "GuiDefaultProfile";
            horizSizing = "center";
            vertSizing = "bottom";
            position = "123 76";
            extent = "78 54";
            minExtent = "8 8";
            visible = "1";
            command = "SearchGui.setSearchType(1);";
            helpTag = "0";
            text = "button";
            groupNum = "-1";
            buttonType = "RadioButton";
            repeatPeriod = "1000";
            repeatDecay = "1";
            bitmap = "./search/artist";
         };
         new GuiBitmapButtonCtrl(SearchByFile) {
            profile = "GuiDefaultProfile";
            horizSizing = "right";
            vertSizing = "bottom";
            position = "202 76";
            extent = "71 54";
            minExtent = "8 8";
            visible = "1";
            command = "SearchGui.setSearchType(2);";
            helpTag = "0";
            text = "button";
            groupNum = "-1";
            buttonType = "RadioButton";
            repeatPeriod = "1000";
            repeatDecay = "1";
            bitmap = "./search/file";
         };
         new GuiBitmapButtonCtrl(SearchRandom) {
            profile = "GuiDefaultProfile";
            horizSizing = "right";
            vertSizing = "top";
            position = "60 132";
            extent = "100 40";
            minExtent = "8 8";
            visible = "1";
            command = "SearchGui.random();";
            helpTag = "0";
            text = "button";
            groupNum = "-1";
            buttonType = "PushButton";
            repeatPeriod = "1000";
            repeatDecay = "1";
            bitmap = "./search/random";
         };
      };
   };
};
//--- OBJECT WRITE END ---

// Jeff: define the search group object.  This object holds all data
// for the searches.
if (!isObject(SearchGroup)) {
   new SimGroup(SearchGroup);
   RootGroup.add(SearchGroup);
}

function SearchGui::onWake(%this) {
   %t = getRealTime();
   SearchMissionList.clear();
   SearchEdit.setValue("");

   // Jeff: delete objects in search group
   %count = SearchGroup.getCount();
   for (%i = 0; %i < %count; %i ++)
      SearchGroup.getObject(0).delete();

   // Jeff: defines and wraps the search type
   if ($pref::searchType $= "" || $pref::searchType < 0 || $pref::searchType > 2)
      $pref::searchType = 0;
   $lastSearchType = $pref::searchType;

   %lb        = ($LB::LoggedIn && ($LB::username !$= ""));
   %platinum  = ($CurrentGame $= "Platinum");

   // Jeff: initilize important search variables
   // Set up the search types.
   %mbpFolder = %lb ? $Files::LB::MBPMissionsFolder : $Files::MBPMissionsFolder;
   %mbgFolder = %lb ? $Files::LB::MBGMissionsFolder : $Files::MBGMissionsFolder;
   %custom    = %lb ? $Files::LB::CustomMissionsFolder : $Files::CustomMissionsFolder;
   %search[0] = $usermods @ "/data/" @ (%platinum ? %mbpFolder : %mbgFolder) @ "/beginner/*.mis";
   %search[1] = $usermods @ "/data/" @ (%platinum ? %mbpFolder : %mbgFolder) @ "/intermediate/*.mis";
   %search[2] = $usermods @ "/data/" @ (%platinum ? %mbpFolder : %mbgFolder) @ "/advanced/*.mis";
   %search[3] = $usermods @ "/data/" @ (%platinum ? %mbpFolder @ "expert" : %custom) @ "/*.mis";
   %searches = 4;

   // Jeff: itterate through each difficulty
   for (%i = 0; %i < %searches; %i ++) {
      %pattern = %search[%i];
      %custom = (($CurrentGame $= "Gold") && (%i == 3)); // Jeff: custom mission

      for (%file = findFirstFile(%pattern); %file !$= ""; %file = findNextFile(%pattern)) {
         %scriptObj = getSearchMissionInfo(%file, %custom);

         // Jeff: if scriptObj is -1, it does not exist or the file was invalid
         // and could not be read
         if (%scriptObj == -1)
            continue;

         // Jeff: Ok, so we disguise qualification by using scriptObject.cache
         // qualification is always qualified if we are in leaderboards too
         // as leaderboards does not have qualification.
	      if (%scriptObj.cache >= 0 || %lb)
            SearchGroup.add(%scriptObj);
      }
   }

   // Jeff: now we will fill up the mission list
   %this.search();

   %t = getRealTime() - %t;
   devecho("search execution time for startup:" SPC %t);
}

// Jeff: this builds the search list specified by the type:
// this is also used for keyword search
//
// Note: I use different for loops because that way it only
// has to check the searchType only once.
function SearchGui::search(%this) {
   SearchMissionList.clear();
   %key   = strlwr(trim(SearchEdit.getValue()));
   %count = SearchGroup.getCount();

   // Jeff: I'm sorry, I had too...
   // and it looks perty too <3
   %text  = "<font:DomCasualD:24><color:696969>";

   // Jeff: decide which search option we will take
   switch ($pref::searchType) {
      // Jeff: search by name
      case 0:
         for (%i = 0; %i < %count; %i ++) {
            %obj = SearchGroup.getObject(%i);

            if (strStr(%obj.searchName, %key) != -1) {
               %row = %obj.name TAB %obj;
               SearchMissionList.addRow(SearchMissionList.rowCount(), %row);
            }
         }
      %text = %text @ "Title:";

      // Jeff: search by artist
      case 1:
         for (%i = 0; %i < %count; %i ++) {
            %obj = SearchGroup.getObject(%i);

            if (strStr(%obj.searchArtist, %key) != -1) {
               %row = %obj.name SPC "By" SPC %obj.artist TAB %obj;
               SearchMissionList.addRow(SearchMissionList.rowCount(), %row);
            }
         }
      %text = %text @ "Artist:";

      // Jeff: search by file
      case 2:
         for (%i = 0; %i < %count; %i ++) {
            %obj = SearchGroup.getObject(%i);

            if (strStr(%obj.searchFile, %key) != -1) {
               %row = %obj.file TAB %obj;
               SearchMissionList.addRow(SearchMissionList.rowCount(), %row);
            }
         }
      %text = %text @ "File:";
   }

   SearchTitle.setText(%text);
   %this.finalize();
}

// Jeff: this is called after a search query is processed.
// this will activate/deactivate the play button, and it will
// auto-select a row in the mission list, ect.
//
// This code is about the only thing left from Spy47's searchGui
function SearchGui::finalize(%this) {
   if (SearchMissionList.rowCount()) {
      SearchMissionList.sort(0);
      SearchMissionList.setSelectedRow(0);
      SearchMissionList.scrollVisible(0);
      SearchOptionsPush.setActive(true);
      SearchRandom.setActive(true);
      SeG_play.setActive(true);
   } else {
      SearchOptionsPush.setActive(false);
      SeG_play.setActive(false);
      SearchRandom.setActive(false);
   }
}

// Jeff: this function will play the selected mission.
function SearchGui::StartMission(%this) {
   %id = SearchMissionList.getSelectedId();
   %mission = getField(SearchMissionList.getRowTextById(%id), 1);

   // Jeff: if we are in the leaderboards, play via lbs start
   //       this is so that we set proper settings and check
   //       anti hacks and such
   if ($LB::username !$= "" && $LB::LoggedIn) {
      $LB::MissionObj = %mission;
      LBPlayMissionDlg.play();
      return;
   }

   $LastMissionType = %mission.type;
   if ($pref::HostMultiPlayer)
      %serverType = "MultiPlayer";
   else
      %serverType = "SinglePlayer";

   // We need to start a server if one isn't already running
   if ($Server::ServerType $= "") {
      // Spy47 : Modifying demo recording system
      if($doRecordDemo) {
         echo("Recording as: ~/client/demos/" @ $recordDemoName @ ".rec");
         recordDemo("~/client/demos/" @ $recordDemoName @ ".rec", %mission.file);
         //recordDemo("~/client/demos/demo.rec", %mission.file);
      }
      createServer(%serverType, %mission.file);
      loadMission(%mission.file, true);
      %conn = new GameConnection(ServerConnection);
      RootGroup.add(ServerConnection);
      %conn.setConnectArgs($pref::Player::Name);
      %conn.setJoinPassword($Client::Password);
      %conn.connectLocal();
   } else
      loadMission(%mission);

   if (isObject(MissionInfo))
      MissionInfo.level = %mission.level;
   savePrefs(true);
}

// Jeff: quick start when the enter key is pressed
function SearchGui::entryStart(%this) {
   if (SearchMissionList.getSelectedId() != -1)
      %this.StartMission();
}

// Jeff: this grabs the search data from the actual file. It reads in the data,
// parses it and extracts the missionInfo object so that we can get stuff such
// as qualification times, authors, names, ect.
function getSearchMissionInfo(%missionFile, %custom) {
   %file = new FileObject();
   %MissionInfoObject = "";
   if (%file.openForRead(%missionFile)) {
		%inInfoBlock = false;
		while (!%file.isEOF()) {
			%line = trim(%file.readLine());

			// Jeff: get rid of comments
			if (strPos(%line, "//") != -1)
			   %line = trim(getSubStr(%line, 0, strPos(%line, "//")));

         // Jeff: if the line is empty, why even continue execution?
         if (%line $= "")
            continue;

			if (%line $= "new ScriptObject(MissionInfo) {")
				%inInfoBlock = true;
			else if (%inInfoBlock && %line $= "};") {
				%inInfoBlock = false;
				%MissionInfoObject = %MissionInfoObject @ %line;
				break;
			}
			if (%inInfoBlock)
			   %MissionInfoObject = %MissionInfoObject @ %line @ " ";
		}
		%file.close();
	} else {
	   // Jeff: file can't be read or does not exist, return -1
	   %file.close();
	   %file.delete();
	   return -1;
	}

   // Jeff: if we don't have mission info, then return -1
   if (trim(%MissionInfoObject) $= "")
	   return -1;

	%MissionInfoObject = "%MissionInfoObject = " @ %MissionInfoObject;
	eval(%MissionInfoObject);
   %file.delete();

	%name = trim((%MissionInfoObject.name !$= "") ? %MissionInfoObject.name : fileBase(%missionFile));
	%MissionInfoObject.name = %name;

	// Jeff: this is used for search comparisons
	%MissionInfoObject.searchName   = strlwr(%name);
	%MissionInfoObject.searchArtist = strlwr(%MissionInfoObject.artist);
	%MissionInfoObject.searchFile   = strlwr(%missionFile);

   // Jeff: disguise qualification, a negative number is not
   //       qualified while a positive one is qualified
   //       the qualification is the object.cache
   %cache = getRandom(1,999999);
   %qualified = %cache;

	%MissionInfoObject.cache  = %qualified;
	%MissionInfoObject.file   = %missionFile;
	%MissionInfoObject.setName("");
	return %MissionInfoObject;
}

// Jeff: show the search options.
function SearchGui::pushOptions(%this) {
   SearchOptionsPop.setVisible(true);

   // Jeff: activate the right button based upon choice
   SearchByTitle.setValue($pref::searchType == 0);
   SearchByArtist.setValue($pref::searchType == 1);
   SearchByFile.setValue($pref::searchType == 2);
}

// Jeff: hide the search options.
function SearchGui::popOptions(%this) {
   SearchOptionsPop.setVisible(false);

   // Jeff: decide if we need to research
   // note that it will not research on random level
   // or if you never changed the search type.
   if ($pref::searchType != $lastSearchType) {
      %this.schedule(10, buildSearchList);
      $lastSearchType = $pref::searchType;
   }
}

// Jeff: in case the user wants to do a random search
function SearchGui::random(%this) {
   %count = SearchMissionList.rowCount();
   if (!%count)
      return;
   %randomNumber = getRandom(0, %count - 1);
   SearchMissionList.setSelectedRow(%randomNumber);
   %this.popOptions();
   $randomMission = true;
   %this.schedule(10, StartMission);
}

// Jeff: the search type is defined from a gui button.
function SearchGui::setSearchType(%this, %type) {
   $pref::searchType = %type;
   %this.search();
}
